// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Purse.Infrastructure.Data;

#nullable disable

namespace Purse.Infrastructure.Migrations
{
    [DbContext(typeof(PurseDbContext))]
    [Migration("20230919124833_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Purse.Domain.Entites.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyLocation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("CompanyRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<string>("CompinyNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Purse.Domain.Entites.PurseM", b =>
                {
                    b.Property<int>("PurseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<float>("PurseBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("PurseKind")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PurseId");

                    b.HasIndex("UserId");

                    b.ToTable("Purse", (string)null);
                });

            modelBuilder.Entity("Purse.Domain.Entites.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<int>("PurseId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionKind")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("transactionValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("TransactionID");

                    b.HasIndex("PurseId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Purse.Domain.Entites.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Purse.Domain.Entites.Voacher", b =>
                {
                    b.Property<int>("VoacherId")
                        .HasColumnType("int");

                    b.Property<int>("PurseDestinationID")
                        .HasColumnType("int");

                    b.Property<int>("PurseSourceId")
                        .HasColumnType("int");

                    b.Property<int>("VoacherStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoacherTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("VoacherValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("VoacherId");

                    b.HasIndex("PurseDestinationID");

                    b.HasIndex("PurseSourceId");

                    b.ToTable("Voacher", (string)null);
                });

            modelBuilder.Entity("Purse.Domain.Entites.PurseM", b =>
                {
                    b.HasOne("Purse.Domain.Entites.User", "User")
                        .WithMany("Purses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Purse.Domain.Entites.Transaction", b =>
                {
                    b.HasOne("Purse.Domain.Entites.PurseM", "Purse")
                        .WithMany("Transactions")
                        .HasForeignKey("PurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purse");
                });

            modelBuilder.Entity("Purse.Domain.Entites.User", b =>
                {
                    b.HasOne("Purse.Domain.Entites.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Purse.Domain.Entites.Voacher", b =>
                {
                    b.HasOne("Purse.Domain.Entites.PurseM", "DestinationPurse")
                        .WithMany()
                        .HasForeignKey("PurseDestinationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Purse.Domain.Entites.PurseM", "SourcePurse")
                        .WithMany()
                        .HasForeignKey("PurseSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationPurse");

                    b.Navigation("SourcePurse");
                });

            modelBuilder.Entity("Purse.Domain.Entites.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Purse.Domain.Entites.PurseM", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Purse.Domain.Entites.User", b =>
                {
                    b.Navigation("Purses");
                });
#pragma warning restore 612, 618
        }
    }
}
